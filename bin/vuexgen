#!/usr/bin/env node

'use strict';
const program = require('commander');
const fs = require('fs');
const store = 'store';
const storePath = './store';
program
  .version('0.0.1')
  .command('generate <component>')
  .description('generate vuex store')
  .option('-n, --name <domain>', 'name of the domain')
  .action(function(component, options) {
    let domain = options.name;

    console.log(`Generating ${domain}.ts`);
    switch (component) {
      case store: {
        let result = generateStore(component, domain);
        return result;
      }
    }
  });

program.parse(process.argv);

function generateStore(component, domain) {
  let camel = makeCamel(domain);
  let upper = camel[0].toUpperCase() + camel.slice(1, camel.length);

  console.log('Generate vuex store');
  let content = `import Axios from 'axios';
  import { Constants } from 'utils/constants';
  import { Filter } from 'common/models/Filter';
  import { UpdateOption, DeleteOption } from 'common/models/QueryOption';
  const qs = require('qs');
  
  class ${upper} {
    id: number;
  }
  
  class State {
    createdItem: ${upper};
    allItems: ${upper}[];
    pagedItems: ${upper}[];
  }
  
  export const state = () => ({
    createdItem: ${upper},
    allItems: [],
    pagedItems: []
  });
  
  export const mutations = {
    create(state: State, ${camel}: ${upper}) {
      state.createdItem = ${camel};
    },
    fetchAll(state: State, ${camel}s: ${upper}[]) {
      state.allItems = ${camel}s;
    },
    fetchPage(state: State, ${camel}s: ${upper}[]) {
      state.pagedItems = ${camel}s;
    },
    update(
      state: State,
      ${camel}: Partial<${upper}>,
      option: UpdateOption<${upper}>
    ) {
      state.pagedItems.forEach((v, i) => {
        if (option.isIncluded(v)) Object.assign(v, ${camel});
      });
      state.allItems.forEach((v, i) => {
        if (option.isIncluded(v)) Object.assign(v, ${camel});
      });
    },
    delete(state: State, option: DeleteOption<${upper}>) {
      state.pagedItems.filter(item => !option.isIncluded(item));
      state.allItems.filter(item => !option.isIncluded(item));
    },
    clear(state: State) {
      state.allItems = [];
      state.pagedItems = [];
    }
  };
  
  export const actions = {
    async create({ commit }, ${camel}: ${upper}) {
      let { data } = await Axios.post(
        Constants.ServerUrl + '/${camel}s',
        ${camel}
      );
      let created${upper} = data;
  
      console.log('Created ${camel}: ', created${upper});
      commit('create', created${upper});
    },
  
    async fetchAll({ commit }, filter: Filter) {
      console.log(filter);
      let query = qs.stringify(filter);
      console.log('$$$$', query);
      let { data } = await Axios.get(
        Constants.ServerUrl + '/${camel}s?' + query
      );
      let ${camel}s = data.payload;
  
      console.log('Number of fetched ${camel}s: ', ${camel}s.length);
      commit('fetchAll', ${camel}s);
    },
  
    async fetchPage({ commit }, filter: Filter) {
      let query = qs.stringify(filter);
      let { data } = await Axios.get(
        Constants.ServerUrl + '/${camel}s?' + query
      );
      let ${camel}s = data.payload;
  
      console.log('Fetched ${camel}s: ', ${camel}s);
      commit('fetchPage', ${camel}s);
    },
  
    async update(
      { commit },
      ${camel}: Partial<${upper}>,
      option: UpdateOption<${upper}>
    ) {
      await Axios.put(Constants.ServerUrl + '/${camel}s', {
        ${camel},
        option
      });
      commit('update', ${camel}, option);
    },
  
    async delete({ commit }, option: DeleteOption<${upper}>) {
      await Axios.put(Constants.ServerUrl + '/${camel}s', {
        option
      });
  
      commit('delete', option);
    },
  
    async clear({ commit }) {
      commit('clear');
    }
  };
`;
  fs.writeFileSync(`${storePath}/${domain}.ts`, content);
  return;
}

function makeCamel(target) {
  let words = target.split('-');
  console.log(words);
  let camel = '';

  for (let i = 0; i < words.length; i++) {
    if (i === 0) {
      camel += words[i];
    } else {
      camel += words[i][0].toUpperCase() + words[i].slice(1, words[i].length);
    }

    console.log(camel);
  }
  return camel;
}
